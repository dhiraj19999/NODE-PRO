1. What is process in Node.js?

process is a global object in Node.js that gives information and control over the current 
Node.js process (running program).

Use Cases:
Reading env variables (process.env)

Graceful shutdown (process.on('exit', ...))

Accepting command-line arguments

Monitoring performance

Is Node.js Single-threaded or Multi-threaded?

Node.js is single-threaded for JavaScript execution,
but uses multiple threads in the background for I/O operations using the libuv library.
Node.js uses a single main thread to run JavaScript code (Event Loop).
But for asynchronous tasks like file system, network calls, DNS, crypto, it uses worker threads (in background) ‚Äî so it's non-blocking and fast.

"Node.js runs JavaScript on a single thread using an event loop, but performs I/O operations using multiple threads under the hood via libuv. This allows Node.js to be asynchronous and non-blocking."


Node.js Architecture ‚Äì How it works

High-Level Architecture Components:
‚úÖ 1. Client Requests
Browser ya client se Node.js server ko request milti hai.

‚úÖ 2. Event Loop
Ye Node.js ka heart hai. Ye dekhta hai kya JavaScript chalani hai, kya callback complete hua hai, 
kis request ka response bhejna hai, etc.
Single Thread
JavaScript execution ke liye ek hi thread use hota hai (event loop ke under).
Thread Pool (libuv)
Jab koi heavy ya async kaam hota hai (file read, API call, DB query), to libuv background me 4 threads ka ek pool use karta hai.
Ye work complete hone par event loop ko callback deta hai.
Callback Queue
Jab koi async operation complete ho jata hai, uska callback yahan aata hai, event loop yahan se callbacks pick karta hai.
V8 Engine
Google Chrome ka V8 engine JavaScript ko compile karke fast banata hai.
üß† Step-by-Step Execution Flow:
Client sends request to Node.js server

Event Loop receives the request

If task is simple (like math), it‚Äôs done in same thread

If task is async (like file/database), it is sent to libuv thread pool

Once background thread finishes, callback is placed in callback queue

Event loop picks callbacks and sends response to client


üß™ Example: File reading (Async vs Sync)

// file: app.js
const fs = require('fs');

console.log("1Ô∏è‚É£ Start");

// ‚úÖ Async I/O operation (goes to thread pool)
fs.readFile('demo.txt', 'utf8', (err, data) => {
  if (err) throw err;
  console.log("3Ô∏è‚É£ File content:", data);
});

console.log("2Ô∏è‚É£ End");


üßæ Output:
sql
Copy
Edit
1Ô∏è‚É£ Start
2Ô∏è‚É£ End
3Ô∏è‚É£ File content: Hello Dhiraj from Node.js!



üîç What Happened Behind the Scenes?
Step	               Description
1Ô∏è‚É£	                  Console logs "Start" immediately
fs.readFile()	         Goes to libuv thread pool (non-blocking)
2Ô∏è‚É£	                       Console logs "End" ‚Äî JS continues without waiting
After file read done	     Callback goes to callback queue
3Ô∏è‚É£	                       Event loop picks callback and prints file content




Compare with Sync version:

const fs = require('fs');

console.log("1Ô∏è‚É£ Start");

const data = fs.readFileSync('demo.txt', 'utf8');
console.log("2Ô∏è‚É£ File content:", data);

console.log("3Ô∏è‚É£ End");


Output:
sql
Copy
Edit
1Ô∏è‚É£ Start
2Ô∏è‚É£ File content: Hello Dhiraj from Node.js!
3Ô∏è‚É£ End
‚ùå Ye blocking hai ‚Äî file read hone tak Node.js ruk jaata hai
‚úÖ Async version me Node.js aage badh jata hai ‚Äî ye hi power hai event loop + thread pool ki

nterview line you can say:
‚ÄúWhen we use async functions like fs.readFile, Node.js delegates the I/O task to a background thread. 
JavaScript code keeps running, and once I/O is done, the callback is pushed to the queue. 
This is how Node handles non-blocking I/O using its architecture.‚Äù














Modules in Node.js are reusable blocks of code that encapsulate related functionality. 
They are similar to libraries in other programming environments, promoting code organization, 
reusability, and maintainability.

3 Main Types of Modules in Node.js:
 Built-in Modules
These come pre-installed with Node.js.
provded by node.js
You just need to require() them ‚Äî no need to install.

‚úÖ Examples:

const fs = require('fs');         // File system
const http = require('http');     // Create server
const path = require('path');     // Handle file paths
const os = require('os');         // OS info


User-Defined Modules
Your own .js files ‚Äî you create reusable logic and import them wherever needed.

‚úÖ Example:
üìÅ math.js

js
Copy
Edit
function add(a, b) {
  return a + b;
}
module.exports = add;
üìÅ index.js

js
Copy
Edit
const add = require('./math');
console.log(add(2, 3)); // 5
‚úÖ This is useful for splitting code into smaller, clean parts.

3Ô∏è‚É£ Third-Party Modules
These are modules created by the community, installed using npm.

‚úÖ Example:

npm install express


const express = require('express');
const app = express();
‚úÖ These modules save time and provide advanced features

commonJS Modules: Node.js uses CommonJS modules, which are based on the require() function for importing 
and module.exports for exporting modules. This is the default module system used in Node.js.
Difference between module.exports and exports 
Module.exports

When we want to export a single class/variable/function from one module to another module, we use the 
module.exports way.

 What is exports in Node.js?
exports is a shortcut/reference to module.exports
It is used to add multiple properties/functions to the export object.
WRONG usage of exports (common mistake):
js
Copy
Edit
// ‚ùå This breaks the link with module.exports
exports = {
  greet: () => "Hi",
  age: 25
};
This will not work with require() because exports ‚â† module.exports anymore.

module.exports is the actual object returned when we require a module. exports is just a shorthand to 
add properties to that object. If we need to export a single function or class, we use
 module.exports = .... If we want to export multiple properties, we can use exports.name = ..., 
 but we must not assign a new object directly to exports = {...}
Exports

When we want to export multiple variables/functions from one module to another, we use exports way.
// Filename: calculator.js

exports.add = (a, b) => a + b;
exports.subtract = (a, b) => a - b;
exports.multiply = (a, b) => a * b;
exports.divide = (a, b) => {
    if (b != 0) {
        return a / b;
    }
    return `Divided by zero !!!`;
}

// Filename: operation.js

const Arithmetic = require("./calculator.js");

console.log(`Addition -> ${Arithmetic.add(100, 40)}`);
console.log(
    `subtraction -> ${Arithmetic.subtract(100, 40)}`);
console.log(
    `Multiplication -> ${Arithmetic.multiply(100, 40)}`);
console.log(`Division -> ${Arithmetic.divide(100, 40)}`);
the difference between module.exports and exports in Node.js. 
We've seen that module.exports is used to export a single function or object from a module, 
while exports is used to export multiple properties or functions
module is an object that contains all the properties and methods defined in the module. 
and exports is an object inside the module oject means exports is a property of module object.

The module object is a special object in Node.js that contains information about the current module (i.e., the current .js file).
It has a key property called module.exports, which defines what values, functions, or objects will be shared with other files when they require() this module.

console.log(module)//
 Module {
  id: '.',
  path: '/Users/dhiraj/Desktop/project',
  exports: {},
  filename: '/Users/dhiraj/Desktop/project/test.js',
  loaded: false,
  children: [],
  paths: [ '/node_modules', ... ]
}
Module Wrapper Function in Node.js
In Node.js, every module is wrapped in a wrapper function to create a scope for the module's code. This ensures that the variables declared within a module are local to that module, and don‚Äôt conflict with variables in other modules.
Variables or functions declared in a Node.js module are not global, they are local to that module"

üîç Why?
Because Node.js har module ko internally wrap karta hai ek function ke andar like this:


(function (exports, require, module, __filename, __dirname) {
  // your code here
});
Toh jo bhi variable ya function tu declare karega us file me, wo us function (i.e., module) ke scope me hi rahega.

‚úÖ Node.js kya karta hai har module ke sath?
Jab tu koi file banaata hai, jaise:

js
Copy
Edit
// file: myfile.js
const x = 10;
function greet() {
  console.log("Hello");
}
Node.js is file ko internally aise wrap karta hai:

js
Copy
Edit
(function (exports, require, module, __filename, __dirname) {
  const x = 10;
  function greet() {
    console.log("Hello");
  }
});
Toh x aur greet() sirf is function ke andar hi accessible honge ‚Äî yani wo local scope me honge.
Wrapper Function Structure:
When you require a module, Node.js wraps the module code inside a function like this:


(function(exports, require, module, __filename, __dirname) {
  // Module code here
});
This module wrapper function is automatically added by Node.js to your code. It provides the following parameters:

exports: An object that will be used to expose the public API of the module. Whatever properties are added to exports will be accessible when the module is require()d in other files.

require: A function that allows you to import other modules.

module: An object that contains information about the current module. It has a property module.exports which defines what will be exported from the module.

__filename: The absolute path of the current module file.

__dirname: The directory path of the current module.

Why the Wrapper Function?
The wrapper function ensures that:

Encapsulation: Each module has its own local scope. This prevents global variables from interfering with each other.

Module Caching: Once a module is loaded, Node.js caches the module‚Äôs exports, so it doesn‚Äôt execute the same module multiple times.

Exporting: The exports object allows you to define the public API of a module. Anything added to exports is accessible when the module is required elsewhere.

Example:
Here‚Äôs an example to illustrate how the wrapper function works:

module.js:
javascript
Copy
// The code inside module.js is wrapped in a function like this:

(function(exports, require, module, __filename, __dirname) {
  // Inside this function, `exports` is local to this module
  exports.greet = function(name) {
    console.log('Hello, ' + name);
  };
})(exports, require, module, __filename, __dirname);
app.js (requiring the module):
javascript
Copy
const module = require('./module'); // The `greet` function is exposed through exports
module.greet('John'); // Output: Hello, John
How the Wrapper Function Works:
exports.greet inside the wrapper function makes the greet function available to be accessed in other files.

The code inside the wrapper is isolated and cannot access any variables outside the wrapper unless explicitly exposed through exports.

How the Module Caching Works:
Once a module is required using require(), it is cached in Node.js. This means if you require the same module multiple times, it won‚Äôt execute the module code again. It will just return the cached module exports.

Summary of Module Wrapper Function:
Every Node.js module is wrapped in a function that provides a local scope.

The wrapper function uses exports, require, module, __filename, and __dirname to manage module exports and imports.

It helps encapsulate the module‚Äôs code, preventing conflicts with other modules.

In Node.js, variables that you declare within a module are local to that module because 
they are wrapped inside the module wrapper function. This prevents global variables from polluting 
the global scope and interfering with variables or functions in other modules.


Each module in Node.js has its own wrapper function.

In other words, every time you create a new module (i.e., a new .js file and require it), Node.js wraps the module code in a unique wrapper function. This ensures that each module has its own local scope, which is isolated from others. The wrapper function makes sure that variables and functions defined inside a module don't interfere with others.

Explanation:
One Wrapper Function Per Module:

Node.js creates a unique wrapper function for each module to encapsulate the code inside it.

This wrapper function is created internally by Node.js when you require a module, but you don‚Äôt see it explicitly in your code. It‚Äôs part of how Node.js handles modules internally.

How It Works Internally:

When you use require('module-name'), Node.js executes the code of the module inside a function that looks like this:

javascript
Copy
(function (exports, require, module, __filename, __dirname) {
  // Your module's code here
});
Scope Isolation:

Inside each module, variables and functions are local to that module because they are wrapped in their own unique function.

Even if two modules define variables with the same name, they will not interfere with each other because they are in separate wrapper functions.

Example:
Module 1 (module1.js):
javascript
Copy
// Module 1 has its own wrapper function
let greeting = "Hello from Module 1"; // Local to module1

exports.printGreeting = function() {
  console.log(greeting);
};
Module 2 (module2.js):
javascript
Copy
// Module 2 has its own wrapper function
let greeting = "Hello from Module 2"; // Local to module2

exports.printGreeting = function() {
  console.log(greeting);
};
Main Application (app.js):
javascript
Copy
const module1 = require('./module1');
const module2 = require('./module2');

module1.printGreeting(); // Output: Hello from Module 1
module2.printGreeting(); // Output: Hello from Module 2
How Node.js Handles the Modules:
When you require('./module1'), Node.js wraps module1.js in a wrapper function and executes it.

Similarly, when you require('./module2'), it wraps module2.js in a separate wrapper function and executes that module's code.

Even though both modules have a greeting variable, they do not conflict because each one is inside its own isolated wrapper function.

Summary:
Each module in Node.js has its own separate wrapper function to provide scope isolation.

The wrapper function is automatically added by Node.js when the module is loaded, which keeps your variables and functions from clashing with others in the application.



ES6 modules enhance JavaScript by allowing developers to modularize code, breaking it into manageable pieces that can be imported and reused across different parts of an application

ES6 modules are a way to organize and structure JavaScript code into reusable pieces. They allow developers to split code into smaller, self-contained files, which can be shared across applications


The package.json file is a fundamental part of any Node.js project. It is a JSON file located at the root of the project directory, serving as a manifest that contains crucial information about the project. This file is used by Node.js and the npm (Node Package Manager) to manage project dependencies, scripts, versions, and other important metadata.
The package-lock.json file in Node.js is an automatically generated file that records the exact versions of all dependencies used in a project. It ensures consistent installations across different environments by locking down the specific versions of packages and their sub-dependencies.
in short package-lock.json locks the versions of all dependencies used in a project, ensuring consistent installations across different environments.
In software development, dependencies and devDependencies refer to packages or libraries a project relies on, but they differ in their purpose and usage. Dependencies are essential for a project to run in a production environment, while devDependencies are used only during development and testing. 

üìö Library vs. CLI Package
Library:

A library is a collection of reusable code modules that provide specific functionalities, such as mathematical operations, data manipulation, or API interactions.

Libraries are designed to be integrated into other programs, allowing developers to leverage existing code without reinventing the wheel.

They typically do not run independently but are invoked by other programs or scripts.
YouTube

CLI (Command-Line Interface) Package:

A CLI package is an application or tool that is executed directly from the command line.

It often utilizes underlying libraries to perform its operations but provides a user-facing interface through the terminal.

Examples include tools like git, npm, or pip, which can be run directly in the terminal to perform tasks.

üì¶ Local vs. Global Package Installation
Local Installation:

Packages installed locally are added to a specific project's directory, typically within a node_modules folder for Node.js projects.

These packages are only accessible within the context of that particular project.

Local installations ensure that each project has its own set of dependencies, preventing version conflicts between projects.
Reddit
+1
Flavio Copes
+1

Global Installation:

Globally installed packages are available system-wide and can be run from any location in the terminal.

This is common for CLI tools that you want to access universally, such as npm, create-react-app, or vue-cli.

However, global installations can lead to version conflicts if different projects require different versions of the same tool