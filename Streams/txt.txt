🚰 Introduction to Streams in Node.js
A stream in Node.js is a powerful way to handle data piece by piece (in chunks) rather than
 loading it all at once.

📦 What is a Stream?
"A stream is like a pipeline through which data flows continuously."
Streams are ideal for:
Reading/Writing large files
Handling video/audio data
Transferring data over networks
Processing real-time input/output

🏞️ Real-Life Analogy:
Imagine a zipline in a village 🧺:
You're sending a 10 GiB file from one house to another.
You can’t carry it all at once—so you send it in baskets, one after another via zipline.
Each basket is like a chunk of data.
This way, the receiver starts processing before all baskets arrive.
✅ Saves memory
✅ Efficient and faster
✅ No waiting for entire file to load

💡 Why Use Streams?
Without streams:
🚫 The entire file is read into memory before processing — which blocks the event loop and wastes RAM.
With streams:
✅ Data is read bit-by-bit, so low memory usage, and non-blocking I/O.

📦 What is ArrayBuffer?
A fixed-length binary data buffer.
It does not provide methods to read or write data directly.
To access or modify the content, we use:
DataView
or TypedArray (like Uint8Array, Int32Array, etc.)

🛠 Creating an ArrayBuffer
const a = new ArrayBuffer(4); 
// Creates a 4-byte buffer

🧪 Using DataView
const view = new DataView(a); 
// DataView allows fine-grained control
You can use DataView to read/write different types (signed, unsigned, 16-bit, 32-bit, float, etc.)

✍️ Setting Values in the Buffer
We can use multiple ways to write the same value (80):
view.setInt8(0, 80);         // Decimal
view.setInt8(1, 0b1010000);  // Binary
view.setInt8(2, 0x50);       // Hexadecimal
view.setInt8(3, 0o120);      // Octal
All 4 ways set the value 80 in different bytes.

📥 Reading Values from the Buffer
const value = view.getInt8(1);  // Reads the byte at index 1 as signed integer
console.log(value);            // 80

➖ Negative Numbers
view.setInt8(0, -1);          // Store -1 in first byte
view.getInt8(0);              // -1
view.getUint8(0);             // 255
getInt8() → reads as signed (interprets MSB as sign bit)
getUint8() → reads as unsigned



📖 Readable Streams in Node.js
Streams solve one of the biggest limitations of working with large files using Buffers.

🧱 Why Not Just Use Buffers?
❌ Limitation with Buffers:
Cannot load files larger than 2 GiB using Buffer.
Large file reading/writing puts pressure on RAM and increases CPU usage.
✅ Streams to the Rescue:
Streams process data in chunks instead of loading the entire file.
Great for performance and memory efficiency.
📥 Creating a Readable Stream
To create a read stream in Node.js, we use the fs module (non-promises) because it directly supports streaming methods.